---
sudo: required
dist: trusty
language: ruby
rvm:
  - 2.2

env:
#  - distribution: centos
#    version: 6
#    init: /sbin/init
#    run_opts: ""
#  - distribution: centos
#    version: 7
#    init: /usr/lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  - distribution: ubuntu
    version: 16.04
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: test.yml
#  - distribution: ubuntu
#    version: 14.04
#    init: /sbin/init
#    run_opts: ""
# Not Ending on travis
#  - distribution: ubuntu
#    version: 12.04
#    init: /sbin/init
#    run_opts: ""

services:
  - docker

before_install:
  - id
  # Install serverspec
  #- 'sudo gem install rake serverspec'
  # Pull container
  # - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  # - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

install:
  # - sudo pip install ansible
  #- export PATH=/home/travis/.gem/ruby/2.2.0/bin:$PATH
  - gem install serverspec serverspec-runner rake docker-api

before_script:
  #- id
  #- ansible --version
  #- ansible-playbook -i vagrant/local-play/inventory vagrant/playbook.yml
  #- tree ~/.gem
  #- echo $PATH
  - serverspec-runner --help

script:
  - id
  - container_id=$(mktemp)
  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Install required Galaxy roles.
  # - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml'

  # Test if webserver is working.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm curl localhost/owncloud'

  # Some MySQL debugging (show all the logs).
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls -lah /var/log
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql/error.log || true
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql.err || true

  # Check to make sure we can connect to MySQL via Unix socket.
  #- >
  #  sudo docker exec "$(cat ${container_id})" mysql -u root -proot -e 'show databases;'
  #  | grep 'information_schema'
  #  && (echo 'MySQL running normally' && exit 0)
  #  || (echo 'MySQL not running' && exit 1)
  # Check to make sure we can connect to MySQL via TCP.
  #- >
  #  sudo docker exec "$(cat ${container_id})" mysql -u root -proot -h 127.0.0.1 -e 'show databases;'
  #  | grep 'information_schema'
  #  && (echo 'MySQL running normally' && exit 0)
  #  || (echo 'MySQL not running' && exit 1)

  # Test role idempotence.
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml
    | tee idempotence.log
    | grep 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (cat idempotence.log && echo 'Idempotence test: fail' && exit 1)
  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
